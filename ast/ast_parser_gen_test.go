// Code generated by testgen. DO NOT EDIT.
package ast

import (
	"fmt"
	"testing"
	"strings"

	"github.com/stretchr/testify/require"
)
			
func Test10PromptAst(t *testing.T) {
	input := `
@printf("What is your name?\n")
@prompt(10, (name: @str){
    @printf("Hello, %s!\n", name)
})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "What is your name?\n"
             }
         ],
         "of": "@printf"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 10
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "Hello, %s!\n"
                             },
                             {
                                 "_type": "Alias",
                                 "of": "name"
                             }
                         ],
                         "of": "@printf"
                     }
                 ],
                 "params": [
                     {
                         "_name": "name",
                         "_type": "Type",
                         "value": "@str"
                     }
                 ]
             }
         ],
         "of": "@prompt"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test11Prompt2Ast(t *testing.T) {
	input := `
@printf("What is your name?\n")
callback1: (title: @str, name: @str){
    @printf("What is your age?\n")
    @prompt(3, (age: @str){
        @printf("Hello %s %s age %s!\n", title, name, age)
    })
}
@prompt(10, callback1("Dear"))

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "What is your name?\n"
             }
         ],
         "of": "@printf"
     },
     {
         "_name": "callback1",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "What is your age?\n"
                     }
                 ],
                 "of": "@printf"
             },
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "IntLiteral",
                         "value": 3
                     },
                     {
                         "_type": "Function",
                         "inner": [
                             {
                                 "_type": "Apply",
                                 "arguments": [
                                     {
                                         "_type": "StringLiteral",
                                         "value": "Hello %s %s age %s!\n"
                                     },
                                     {
                                         "_type": "Alias",
                                         "of": "title"
                                     },
                                     {
                                         "_type": "Alias",
                                         "of": "name"
                                     },
                                     {
                                         "_type": "Alias",
                                         "of": "age"
                                     }
                                 ],
                                 "of": "@printf"
                             }
                         ],
                         "params": [
                             {
                                 "_name": "age",
                                 "_type": "Type",
                                 "value": "@str"
                             }
                         ]
                     }
                 ],
                 "of": "@prompt"
             }
         ],
         "params": [
             {
                 "_name": "title",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "name",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 10
             },
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "Dear"
                     }
                 ],
                 "of": "callback1"
             }
         ],
         "of": "@prompt"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test11Prompt3Ast(t *testing.T) {
	input := `
@printf("What is your name?\n")
@prompt(50, (name: @str){
    @printf("What is your age?\n")
    @prompt(3, (age: @str){
        @printf("Hello, %s!\n", name)
    })
})
`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "What is your name?\n"
             }
         ],
         "of": "@printf"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 50
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "What is your age?\n"
                             }
                         ],
                         "of": "@printf"
                     },
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "IntLiteral",
                                 "value": 3
                             },
                             {
                                 "_type": "Function",
                                 "inner": [
                                     {
                                         "_type": "Apply",
                                         "arguments": [
                                             {
                                                 "_type": "StringLiteral",
                                                 "value": "Hello, %s!\n"
                                             },
                                             {
                                                 "_type": "Alias",
                                                 "of": "name"
                                             }
                                         ],
                                         "of": "@printf"
                                     }
                                 ],
                                 "params": [
                                     {
                                         "_name": "age",
                                         "_type": "Type",
                                         "value": "@str"
                                     }
                                 ]
                             }
                         ],
                         "of": "@prompt"
                     }
                 ],
                 "params": [
                     {
                         "_name": "name",
                         "_type": "Type",
                         "value": "@str"
                     }
                 ]
             }
         ],
         "of": "@prompt"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test12MathAddAst(t *testing.T) {
	input := `
@add(3, 3, (x: @int){
    @printf("x: %d\n", x)   
})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 3
             },
             {
                 "_type": "IntLiteral",
                 "value": 3
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "x: %d\n"
                             },
                             {
                                 "_type": "Alias",
                                 "of": "x"
                             }
                         ],
                         "of": "@printf"
                     }
                 ],
                 "params": [
                     {
                         "_name": "x",
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ],
         "of": "@add"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test12MathMulAst(t *testing.T) {
	input := `
mymul: @mul(3, 3)
mymul((x: @int){
    @printf("x: %d\n", x)   
})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "mymul",
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 3
             },
             {
                 "_type": "IntLiteral",
                 "value": 3
             }
         ],
         "of": "@mul"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "x: %d\n"
                             },
                             {
                                 "_type": "Alias",
                                 "of": "x"
                             }
                         ],
                         "of": "@printf"
                     }
                 ],
                 "params": [
                     {
                         "_name": "x",
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ],
         "of": "mymul"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test13FuncIdAst(t *testing.T) {
	input := `
puts: (s: @str){
    @unsafe.libc.puts(s, (code:@int){})
}
puts("hello world!")

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "puts",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "s"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ],
         "params": [
             {
                 "_name": "s",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hello world!"
             }
         ],
         "of": "puts"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test14AnonCurryAst(t *testing.T) {
	input := `
foo: (msg: @str){
    @unsafe.libc.puts(msg, (code:@int){})
}("hi")
foo()

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "foo",
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hi"
             }
         ],
         "function": {
             "_type": "Function",
             "inner": [
                 {
                     "_type": "Apply",
                     "arguments": [
                         {
                             "_type": "Alias",
                             "of": "msg"
                         },
                         {
                             "_type": "Function",
                             "params": [
                                 {
                                     "_name": "code",
                                     "_type": "Type",
                                     "value": "@int"
                                 }
                             ]
                         }
                     ],
                     "of": "@unsafe.libc.puts"
                 }
             ],
             "params": [
                 {
                     "_name": "msg",
                     "_type": "Type",
                     "value": "@str"
                 }
             ]
         }
     },
     {
         "_type": "Apply",
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test15AnonCallAst(t *testing.T) {
	input := `
(msg: @str){
    @unsafe.libc.puts(msg, (code:@int){})
}("hi")

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hi"
             }
         ],
         "function": {
             "_type": "Function",
             "inner": [
                 {
                     "_type": "Apply",
                     "arguments": [
                         {
                             "_type": "Alias",
                             "of": "msg"
                         },
                         {
                             "_type": "Function",
                             "params": [
                                 {
                                     "_name": "code",
                                     "_type": "Type",
                                     "value": "@int"
                                 }
                             ]
                         }
                     ],
                     "of": "@unsafe.libc.puts"
                 }
             ],
             "params": [
                 {
                     "_name": "msg",
                     "_type": "Type",
                     "value": "@str"
                 }
             ]
         }
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test16ComptimeParamAst(t *testing.T) {
	input := `
foo: (s: @str!) {
    @unsafe.libc.puts(s, (code:@int){})
}
foo("hi")

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "s"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ],
         "params": [
             {
                 "_name": "s",
                 "_type": "Type",
                 "comptime": true,
                 "value": "@str"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hi"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test17AtoiAst(t *testing.T) {
	input := `
@unsafe.libc.atoi("123", (x: @int){
    @printf("result: %d\n", x)
})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "123"
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "result: %d\n"
                             },
                             {
                                 "_type": "Alias",
                                 "of": "x"
                             }
                         ],
                         "of": "@printf"
                     }
                 ],
                 "params": [
                     {
                         "_name": "x",
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ],
         "of": "@unsafe.libc.atoi"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test18GtAst(t *testing.T) {
	input := `
@igt(2, 3, (){
    @printf("More\n")
}, (){
    @printf("Less\n")
})
`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "IntLiteral",
                 "value": 2
             },
             {
                 "_type": "IntLiteral",
                 "value": 3
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "More\n"
                             }
                         ],
                         "of": "@printf"
                     }
                 ]
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "Less\n"
                             }
                         ],
                         "of": "@printf"
                     }
                 ]
             }
         ],
         "of": "@igt"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test19IfAst(t *testing.T) {
	input := `
if: (cond: ((),()), ok:()){
    cond(ok, {})
}
if(@igt(4, 3), {
    @printf("More\n")
})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "if",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "ok"
                     },
                     {
                         "_type": "Function"
                     }
                 ],
                 "of": "cond"
             }
         ],
         "params": [
             {
                 "_name": "cond",
                 "_type": "Type",
                 "values": [
                     {
                         "_type": "Type"
                     },
                     {
                         "_type": "Type"
                     }
                 ]
             },
             {
                 "_name": "ok",
                 "_type": "Type"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "IntLiteral",
                         "value": 4
                     },
                     {
                         "_type": "IntLiteral",
                         "value": 3
                     }
                 ],
                 "of": "@igt"
             },
             {
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "StringLiteral",
                                 "value": "More\n"
                             }
                         ],
                         "of": "@printf"
                     }
                 ]
             }
         ],
         "of": "if"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test1PrintAst(t *testing.T) {
	input := `
@unsafe.libc.puts("hello world!", (code:@int){})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hello world!"
             },
             {
                 "_type": "Function",
                 "params": [
                     {
                         "_name": "code",
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ],
         "of": "@unsafe.libc.puts"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test20AnonImmediateCallAst(t *testing.T) {
	input := `
(){
    @printf("Hi\n")
}
`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "Hi\n"
                     }
                 ],
                 "of": "@printf"
             }
         ]
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test21AnonImmediateCallAst(t *testing.T) {
	input := `
{
    @printf("Hi\n")
}
`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "Hi\n"
                     }
                 ],
                 "of": "@printf"
             }
         ]
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test2IntConstAst(t *testing.T) {
	input := `
x: 12
@printf("%d", x)

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "x",
         "_type": "IntLiteral",
         "value": 12
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "%d"
             },
             {
                 "_type": "Alias",
                 "of": "x"
             }
         ],
         "of": "@printf"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test2StrConstAst(t *testing.T) {
	input := `
msg: "hello world"
@unsafe.libc.puts(msg, (code:@int){})

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Alias",
                 "of": "msg"
             },
             {
                 "_type": "Function",
                 "params": [
                     {
                         "_name": "code",
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ],
         "of": "@unsafe.libc.puts"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test3FuncAst(t *testing.T) {
	input := `
msg: "hello world"
foo: (){
    @unsafe.libc.puts(msg, (code:@int){})
}
foo()

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "msg"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ]
     },
     {
         "_type": "Apply",
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test3Func2Ast(t *testing.T) {
	input := `
msg: "hello world"
foo: (s:@str){
    @unsafe.libc.puts(s, (code:@int){})
}
foo(msg)
`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "s"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ],
         "params": [
             {
                 "_name": "s",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Alias",
                 "of": "msg"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test4FuncAst(t *testing.T) {
	input := `
msg: "hello world"
foo: {
    @unsafe.libc.puts(msg, (code:@int){})
}
foo

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "msg"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ]
     },
     {
         "_type": "Apply",
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test5FuncStdAst(t *testing.T) {
	input := `
@std
foo: (x:string){
	ok: (s: string){
		@unsafe.libc.puts(s, (code:@int){})
	}
	ok(x)
	ok(x)
}
foo("hello world")

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_type": "Apply",
         "of": "@std"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_name": "ok",
                 "_type": "Function",
                 "inner": [
                     {
                         "_type": "Apply",
                         "arguments": [
                             {
                                 "_type": "Alias",
                                 "of": "s"
                             },
                             {
                                 "_type": "Function",
                                 "params": [
                                     {
                                         "_name": "code",
                                         "_type": "Type",
                                         "value": "@int"
                                     }
                                 ]
                             }
                         ],
                         "of": "@unsafe.libc.puts"
                     }
                 ],
                 "params": [
                     {
                         "_name": "s",
                         "_type": "Type",
                         "value": "string"
                     }
                 ]
             },
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "x"
                     }
                 ],
                 "of": "ok"
             },
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "x"
                     }
                 ],
                 "of": "ok"
             }
         ],
         "params": [
             {
                 "_name": "x",
                 "_type": "Type",
                 "value": "string"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "hello world"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test6CallbackAst(t *testing.T) {
	input := `
msg: "hello world"
foo: (input: @str){
    @unsafe.libc.puts(input, (code:@int){})
}
bar: (cb:(@str)) {
    cb(msg)
}
bar(foo)

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "input"
                     },
                     {
                         "_type": "Function",
                         "params": [
                             {
                                 "_name": "code",
                                 "_type": "Type",
                                 "value": "@int"
                             }
                         ]
                     }
                 ],
                 "of": "@unsafe.libc.puts"
             }
         ],
         "params": [
             {
                 "_name": "input",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_name": "bar",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "Alias",
                         "of": "msg"
                     }
                 ],
                 "of": "cb"
             }
         ],
         "params": [
             {
                 "_name": "cb",
                 "_type": "Type",
                 "values": [
                     {
                         "_type": "Type",
                         "value": "@str"
                     }
                 ]
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Alias",
                 "of": "foo"
             }
         ],
         "of": "bar"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test7ApplyAst(t *testing.T) {
	input := `
msg: "hello world"
foo: (input: @str, n: @int){
    @printf("%s x %ld", input, n)
}
bar: (cb:(@int)) {
    cb(42)
}
qux: foo(msg)
bar(qux)

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "msg",
         "_type": "StringLiteral",
         "value": "hello world"
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "%s x %ld"
                     },
                     {
                         "_type": "Alias",
                         "of": "input"
                     },
                     {
                         "_type": "Alias",
                         "of": "n"
                     }
                 ],
                 "of": "@printf"
             }
         ],
         "params": [
             {
                 "_name": "input",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "n",
                 "_type": "Type",
                 "value": "@int"
             }
         ]
     },
     {
         "_name": "bar",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "IntLiteral",
                         "value": 42
                     }
                 ],
                 "of": "cb"
             }
         ],
         "params": [
             {
                 "_name": "cb",
                 "_type": "Type",
                 "values": [
                     {
                         "_type": "Type",
                         "value": "@int"
                     }
                 ]
             }
         ]
     },
     {
         "_name": "qux",
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Alias",
                 "of": "msg"
             }
         ],
         "of": "foo"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Alias",
                 "of": "qux"
             }
         ],
         "of": "bar"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test8AppliedCallbackAst(t *testing.T) {
	input := `
bar: (m1:@str, m2:@str) {
    @printf("msg1: %s, msg2: %s\n", m1, m2)
}
foo: (cb:(@str)){
    cb("bye")
}
foo(bar("hi"))

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "bar",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "msg1: %s, msg2: %s\n"
                     },
                     {
                         "_type": "Alias",
                         "of": "m1"
                     },
                     {
                         "_type": "Alias",
                         "of": "m2"
                     }
                 ],
                 "of": "@printf"
             }
         ],
         "params": [
             {
                 "_name": "m1",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "m2",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "bye"
                     }
                 ],
                 "of": "cb"
             }
         ],
         "params": [
             {
                 "_name": "cb",
                 "_type": "Type",
                 "values": [
                     {
                         "_type": "Type",
                         "value": "@str"
                     }
                 ]
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "hi"
                     }
                 ],
                 "of": "bar"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test8CurryAst(t *testing.T) {
	input := `
foo: (n:@str, s:@str){
	@printf("The winning number for %s is %s\n", s, n)
}
bar: foo("42")
baz: foo("43", "Bob")
bar("Alice")
baz()

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "The winning number for %s is %s\n"
                     },
                     {
                         "_type": "Alias",
                         "of": "s"
                     },
                     {
                         "_type": "Alias",
                         "of": "n"
                     }
                 ],
                 "of": "@printf"
             }
         ],
         "params": [
             {
                 "_name": "n",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "s",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_name": "bar",
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "42"
             }
         ],
         "of": "foo"
     },
     {
         "_name": "baz",
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "43"
             },
             {
                 "_type": "StringLiteral",
                 "value": "Bob"
             }
         ],
         "of": "foo"
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "StringLiteral",
                 "value": "Alice"
             }
         ],
         "of": "bar"
     },
     {
         "_type": "Apply",
         "of": "baz"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test9Curry2Ast(t *testing.T) {
	input := `
bar: (a:@str, b:@str, c:@str) {
    @printf("a: %s, b: %s, c: %s\n", a, b, c)
}
foo: (cb:(@str)){
    cb("c")
}
foo(bar("a", "b"))

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "bar",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "a: %s, b: %s, c: %s\n"
                     },
                     {
                         "_type": "Alias",
                         "of": "a"
                     },
                     {
                         "_type": "Alias",
                         "of": "b"
                     },
                     {
                         "_type": "Alias",
                         "of": "c"
                     }
                 ],
                 "of": "@printf"
             }
         ],
         "params": [
             {
                 "_name": "a",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "b",
                 "_type": "Type",
                 "value": "@str"
             },
             {
                 "_name": "c",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "c"
                     }
                 ],
                 "of": "cb"
             }
         ],
         "params": [
             {
                 "_name": "cb",
                 "_type": "Type",
                 "values": [
                     {
                         "_type": "Type",
                         "value": "@str"
                     }
                 ]
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "a"
                     },
                     {
                         "_type": "StringLiteral",
                         "value": "b"
                     }
                 ],
                 "of": "bar"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}

func Test9Curry3Ast(t *testing.T) {
	input := `
foo: (cb: ()){
    cb()
}
bar: (name: @str) {
    @printf("Hello, %s!\n", name)
}
foo(bar("John"))

`
	b, err := ToAst(strings.NewReader(input))
	require.NoError(t, err)
	actual := string(b)

	expected := `
[
     {
         "_name": "foo",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "of": "cb"
             }
         ],
         "params": [
             {
                 "_name": "cb",
                 "_type": "Type"
             }
         ]
     },
     {
         "_name": "bar",
         "_type": "Function",
         "inner": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "Hello, %s!\n"
                     },
                     {
                         "_type": "Alias",
                         "of": "name"
                     }
                 ],
                 "of": "@printf"
             }
         ],
         "params": [
             {
                 "_name": "name",
                 "_type": "Type",
                 "value": "@str"
             }
         ]
     },
     {
         "_type": "Apply",
         "arguments": [
             {
                 "_type": "Apply",
                 "arguments": [
                     {
                         "_type": "StringLiteral",
                         "value": "John"
                     }
                 ],
                 "of": "bar"
             }
         ],
         "of": "foo"
     }
 ]
`
	require.JSONEq(t, expected, actual, fmt.Sprintf("got: %v", actual))
}
