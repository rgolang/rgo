list: ((@int, list), ()) // recursive type 
nil: (cb:(@int, list), end:()){end()}
cons: (h:@int, t:list, cb:(@int, list)){
    cb(h, t)
}
iterate: (ok: (@int), end: (), head:@int, tail: list){
    ok(head)
    tail(iterate(ok, end), end) // if tail is nil, it does nothing 
}
each: (list: list, ok: (@int), end: ()){
    list(iterate(ok, end), end)
}

// ^ above is a library

mylist: cons(1, cons(2, cons(3, cons(4, nil))))
each(mylist, (n: @int){
    @printf("%d\n", n)
}, {
    @printf("%s\n", "end")
})
